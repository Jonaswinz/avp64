// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

// Service specification
class TestService final {
 public:
  static constexpr char const* service_full_name() {
    return "TestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC: the client sends a request via command and receives the status from the vp
    virtual ::grpc::Status HandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> AsyncHandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(AsyncHandleCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> PrepareAsyncHandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(PrepareAsyncHandleCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status set_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> Asyncset_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(Asyncset_breakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> PrepareAsyncset_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(PrepareAsyncset_breakpointRaw(context, request, cq));
    }
    virtual ::grpc::Status remove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> Asyncremove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(Asyncremove_breakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> PrepareAsyncremove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(PrepareAsyncremove_breakpointRaw(context, request, cq));
    }
    virtual ::grpc::Status MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::rsp_msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> AsyncMMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(AsyncMMIO_set_addr_rangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> PrepareAsyncMMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(PrepareAsyncMMIO_set_addr_rangeRaw(context, request, cq));
    }
    // The client receives the (value,addr) pair for a mmio write
    virtual ::grpc::Status get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::mmio_output* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>> Asyncget_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>>(Asyncget_MMIOvalueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>> PrepareAsyncget_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>>(PrepareAsyncget_MMIOvalueRaw(context, request, cq));
    }
    // The client sets the value for a mmio read
    virtual ::grpc::Status set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::rsp_msg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> Asyncset_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(Asyncset_MMIOvalueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>> PrepareAsyncset_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>>(PrepareAsyncset_MMIOvalueRaw(context, request, cq));
    }
    // The client receives a stream of executed basic block
    virtual ::grpc::Status get_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::basic_block* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>> Asyncget_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>>(Asyncget_code_coverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>> PrepareAsyncget_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>>(PrepareAsyncget_code_coverageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // A simple RPC: the client sends a request via command and receives the status from the vp
      virtual void HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // The client receives the (value,addr) pair for a mmio write
      virtual void get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // The client sets the value for a mmio read
      virtual void set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // The client receives a stream of executed basic block
      virtual void get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* AsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* PrepareAsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* Asyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* PrepareAsyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* Asyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* PrepareAsyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* AsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* PrepareAsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>* Asyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mmio_output>* PrepareAsyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* Asyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rsp_msg>* PrepareAsyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>* Asyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::basic_block>* PrepareAsyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status HandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> AsyncHandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(AsyncHandleCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> PrepareAsyncHandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(PrepareAsyncHandleCommandRaw(context, request, cq));
    }
    ::grpc::Status set_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> Asyncset_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(Asyncset_breakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> PrepareAsyncset_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(PrepareAsyncset_breakpointRaw(context, request, cq));
    }
    ::grpc::Status remove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> Asyncremove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(Asyncremove_breakpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> PrepareAsyncremove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(PrepareAsyncremove_breakpointRaw(context, request, cq));
    }
    ::grpc::Status MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::rsp_msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> AsyncMMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(AsyncMMIO_set_addr_rangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> PrepareAsyncMMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(PrepareAsyncMMIO_set_addr_rangeRaw(context, request, cq));
    }
    ::grpc::Status get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::mmio_output* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mmio_output>> Asyncget_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mmio_output>>(Asyncget_MMIOvalueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mmio_output>> PrepareAsyncget_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mmio_output>>(PrepareAsyncget_MMIOvalueRaw(context, request, cq));
    }
    ::grpc::Status set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::rsp_msg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> Asyncset_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(Asyncset_MMIOvalueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>> PrepareAsyncset_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rsp_msg>>(PrepareAsyncset_MMIOvalueRaw(context, request, cq));
    }
    ::grpc::Status get_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::basic_block* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_block>> Asyncget_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_block>>(Asyncget_code_coverageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_block>> PrepareAsyncget_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::basic_block>>(PrepareAsyncget_code_coverageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) override;
      void HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) override;
      void set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) override;
      void remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) override;
      void MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, std::function<void(::grpc::Status)>) override;
      void get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, ::grpc::ClientUnaryReactor* reactor) override;
      void set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, std::function<void(::grpc::Status)>) override;
      void set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, std::function<void(::grpc::Status)>) override;
      void get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* AsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* PrepareAsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* Asyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* PrepareAsyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* Asyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* PrepareAsyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* AsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* PrepareAsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mmio_output>* Asyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mmio_output>* PrepareAsyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* Asyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rsp_msg>* PrepareAsyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basic_block>* Asyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::basic_block>* PrepareAsyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_HandleCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_set_breakpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_remove_breakpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_MMIO_set_addr_range_;
    const ::grpc::internal::RpcMethod rpcmethod_get_MMIOvalue_;
    const ::grpc::internal::RpcMethod rpcmethod_set_MMIOvalue_;
    const ::grpc::internal::RpcMethod rpcmethod_get_code_coverage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC: the client sends a request via command and receives the status from the vp
    virtual ::grpc::Status HandleCommand(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response);
    virtual ::grpc::Status set_breakpoint(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response);
    virtual ::grpc::Status remove_breakpoint(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response);
    virtual ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* context, const ::mmio_addr_range* request, ::rsp_msg* response);
    // The client receives the (value,addr) pair for a mmio write
    virtual ::grpc::Status get_MMIOvalue(::grpc::ServerContext* context, const ::req_msg* request, ::mmio_output* response);
    // The client sets the value for a mmio read
    virtual ::grpc::Status set_MMIOvalue(::grpc::ServerContext* context, const ::mmio_input* request, ::rsp_msg* response);
    // The client receives a stream of executed basic block
    virtual ::grpc::Status get_code_coverage(::grpc::ServerContext* context, const ::req_msg* request, ::basic_block* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandleCommand() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleCommand(::grpc::ServerContext* context, ::req_msg* request, ::grpc::ServerAsyncResponseWriter< ::rsp_msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_breakpoint(::grpc::ServerContext* context, ::req_msg* request, ::grpc::ServerAsyncResponseWriter< ::rsp_msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove_breakpoint(::grpc::ServerContext* context, ::req_msg* request, ::grpc::ServerAsyncResponseWriter< ::rsp_msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMMIO_set_addr_range(::grpc::ServerContext* context, ::mmio_addr_range* request, ::grpc::ServerAsyncResponseWriter< ::rsp_msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_MMIOvalue(::grpc::ServerContext* context, ::req_msg* request, ::grpc::ServerAsyncResponseWriter< ::mmio_output>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_MMIOvalue(::grpc::ServerContext* context, ::mmio_input* request, ::grpc::ServerAsyncResponseWriter< ::rsp_msg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_code_coverage(::grpc::ServerContext* context, ::req_msg* request, ::grpc::ServerAsyncResponseWriter< ::basic_block>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_HandleCommand<WithAsyncMethod_set_breakpoint<WithAsyncMethod_remove_breakpoint<WithAsyncMethod_MMIO_set_addr_range<WithAsyncMethod_get_MMIOvalue<WithAsyncMethod_set_MMIOvalue<WithAsyncMethod_get_code_coverage<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandleCommand() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::req_msg* request, ::rsp_msg* response) { return this->HandleCommand(context, request, response); }));}
    void SetMessageAllocatorFor_HandleCommand(
        ::grpc::MessageAllocator< ::req_msg, ::rsp_msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::req_msg* request, ::rsp_msg* response) { return this->set_breakpoint(context, request, response); }));}
    void SetMessageAllocatorFor_set_breakpoint(
        ::grpc::MessageAllocator< ::req_msg, ::rsp_msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_breakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::req_msg* request, ::rsp_msg* response) { return this->remove_breakpoint(context, request, response); }));}
    void SetMessageAllocatorFor_remove_breakpoint(
        ::grpc::MessageAllocator< ::req_msg, ::rsp_msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req_msg, ::rsp_msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remove_breakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mmio_addr_range, ::rsp_msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mmio_addr_range* request, ::rsp_msg* response) { return this->MMIO_set_addr_range(context, request, response); }));}
    void SetMessageAllocatorFor_MMIO_set_addr_range(
        ::grpc::MessageAllocator< ::mmio_addr_range, ::rsp_msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mmio_addr_range, ::rsp_msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MMIO_set_addr_range(
      ::grpc::CallbackServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::req_msg, ::mmio_output>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::req_msg* request, ::mmio_output* response) { return this->get_MMIOvalue(context, request, response); }));}
    void SetMessageAllocatorFor_get_MMIOvalue(
        ::grpc::MessageAllocator< ::req_msg, ::mmio_output>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req_msg, ::mmio_output>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_MMIOvalue(
      ::grpc::CallbackServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mmio_input, ::rsp_msg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mmio_input* request, ::rsp_msg* response) { return this->set_MMIOvalue(context, request, response); }));}
    void SetMessageAllocatorFor_set_MMIOvalue(
        ::grpc::MessageAllocator< ::mmio_input, ::rsp_msg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mmio_input, ::rsp_msg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_MMIOvalue(
      ::grpc::CallbackServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::req_msg, ::basic_block>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::req_msg* request, ::basic_block* response) { return this->get_code_coverage(context, request, response); }));}
    void SetMessageAllocatorFor_get_code_coverage(
        ::grpc::MessageAllocator< ::req_msg, ::basic_block>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::req_msg, ::basic_block>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_code_coverage(
      ::grpc::CallbackServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_HandleCommand<WithCallbackMethod_set_breakpoint<WithCallbackMethod_remove_breakpoint<WithCallbackMethod_MMIO_set_addr_range<WithCallbackMethod_get_MMIOvalue<WithCallbackMethod_set_MMIOvalue<WithCallbackMethod_get_code_coverage<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandleCommand() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandleCommand() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandleCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_breakpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove_breakpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMMIO_set_addr_range(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_MMIOvalue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestset_MMIOvalue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_code_coverage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandleCommand() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandleCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandleCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->set_breakpoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_breakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->remove_breakpoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* remove_breakpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MMIO_set_addr_range(context, request, response); }));
    }
    ~WithRawCallbackMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MMIO_set_addr_range(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_MMIOvalue(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_MMIOvalue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->set_MMIOvalue(context, request, response); }));
    }
    ~WithRawCallbackMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* set_MMIOvalue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get_code_coverage(context, request, response); }));
    }
    ~WithRawCallbackMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get_code_coverage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandleCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandleCommand() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::req_msg, ::rsp_msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::req_msg, ::rsp_msg>* streamer) {
                       return this->StreamedHandleCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandleCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandleCommand(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandleCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req_msg,::rsp_msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_set_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_set_breakpoint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::req_msg, ::rsp_msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::req_msg, ::rsp_msg>* streamer) {
                       return this->Streamedset_breakpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_set_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status set_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedset_breakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req_msg,::rsp_msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_remove_breakpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_remove_breakpoint() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::req_msg, ::rsp_msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::req_msg, ::rsp_msg>* streamer) {
                       return this->Streamedremove_breakpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_remove_breakpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status remove_breakpoint(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedremove_breakpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req_msg,::rsp_msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MMIO_set_addr_range : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MMIO_set_addr_range() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mmio_addr_range, ::rsp_msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mmio_addr_range, ::rsp_msg>* streamer) {
                       return this->StreamedMMIO_set_addr_range(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MMIO_set_addr_range() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MMIO_set_addr_range(::grpc::ServerContext* /*context*/, const ::mmio_addr_range* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMMIO_set_addr_range(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mmio_addr_range,::rsp_msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_MMIOvalue() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::req_msg, ::mmio_output>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::req_msg, ::mmio_output>* streamer) {
                       return this->Streamedget_MMIOvalue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_MMIOvalue(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::mmio_output* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_MMIOvalue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req_msg,::mmio_output>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_set_MMIOvalue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_set_MMIOvalue() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mmio_input, ::rsp_msg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mmio_input, ::rsp_msg>* streamer) {
                       return this->Streamedset_MMIOvalue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_set_MMIOvalue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status set_MMIOvalue(::grpc::ServerContext* /*context*/, const ::mmio_input* /*request*/, ::rsp_msg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedset_MMIOvalue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mmio_input,::rsp_msg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_code_coverage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get_code_coverage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::req_msg, ::basic_block>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::req_msg, ::basic_block>* streamer) {
                       return this->Streamedget_code_coverage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get_code_coverage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_code_coverage(::grpc::ServerContext* /*context*/, const ::req_msg* /*request*/, ::basic_block* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_code_coverage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::req_msg,::basic_block>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_HandleCommand<WithStreamedUnaryMethod_set_breakpoint<WithStreamedUnaryMethod_remove_breakpoint<WithStreamedUnaryMethod_MMIO_set_addr_range<WithStreamedUnaryMethod_get_MMIOvalue<WithStreamedUnaryMethod_set_MMIOvalue<WithStreamedUnaryMethod_get_code_coverage<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_HandleCommand<WithStreamedUnaryMethod_set_breakpoint<WithStreamedUnaryMethod_remove_breakpoint<WithStreamedUnaryMethod_MMIO_set_addr_range<WithStreamedUnaryMethod_get_MMIOvalue<WithStreamedUnaryMethod_set_MMIOvalue<WithStreamedUnaryMethod_get_code_coverage<Service > > > > > > > StreamedService;
};


#endif  // GRPC_test_2eproto__INCLUDED
