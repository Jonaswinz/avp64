// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "fuzzing/test.pb.h"
#include "fuzzing/test.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* TestService_method_names[] = {
  "/TestService/HandleCommand",
  "/TestService/set_breakpoint",
  "/TestService/remove_breakpoint",
  "/TestService/MMIO_set_addr_range",
  "/TestService/get_MMIOvalue",
  "/TestService/set_MMIOvalue",
  "/TestService/get_code_coverage",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel, options));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HandleCommand_(TestService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_breakpoint_(TestService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_breakpoint_(TestService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MMIO_set_addr_range_(TestService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_MMIOvalue_(TestService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_set_MMIOvalue_(TestService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_code_coverage_(TestService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TestService::Stub::HandleCommand(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleCommand_, context, request, response);
}

void TestService::Stub::async::HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleCommand_, context, request, response, std::move(f));
}

void TestService::Stub::async::HandleCommand(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::PrepareAsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsp_msg, ::req_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::AsyncHandleCommandRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::set_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_breakpoint_, context, request, response);
}

void TestService::Stub::async::set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_breakpoint_, context, request, response, std::move(f));
}

void TestService::Stub::async::set_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::PrepareAsyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsp_msg, ::req_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::Asyncset_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::remove_breakpoint(::grpc::ClientContext* context, const ::req_msg& request, ::rsp_msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_remove_breakpoint_, context, request, response);
}

void TestService::Stub::async::remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remove_breakpoint_, context, request, response, std::move(f));
}

void TestService::Stub::async::remove_breakpoint(::grpc::ClientContext* context, const ::req_msg* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_remove_breakpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::PrepareAsyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsp_msg, ::req_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_remove_breakpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::Asyncremove_breakpointRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremove_breakpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::rsp_msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mmio_addr_range, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MMIO_set_addr_range_, context, request, response);
}

void TestService::Stub::async::MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mmio_addr_range, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MMIO_set_addr_range_, context, request, response, std::move(f));
}

void TestService::Stub::async::MMIO_set_addr_range(::grpc::ClientContext* context, const ::mmio_addr_range* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MMIO_set_addr_range_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::PrepareAsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsp_msg, ::mmio_addr_range, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MMIO_set_addr_range_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::AsyncMMIO_set_addr_rangeRaw(::grpc::ClientContext* context, const ::mmio_addr_range& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMMIO_set_addr_rangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg& request, ::mmio_output* response) {
  return ::grpc::internal::BlockingUnaryCall< ::req_msg, ::mmio_output, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_MMIOvalue_, context, request, response);
}

void TestService::Stub::async::get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::req_msg, ::mmio_output, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_MMIOvalue_, context, request, response, std::move(f));
}

void TestService::Stub::async::get_MMIOvalue(::grpc::ClientContext* context, const ::req_msg* request, ::mmio_output* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_MMIOvalue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mmio_output>* TestService::Stub::PrepareAsyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mmio_output, ::req_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_MMIOvalue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mmio_output>* TestService::Stub::Asyncget_MMIOvalueRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_MMIOvalueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input& request, ::rsp_msg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mmio_input, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_set_MMIOvalue_, context, request, response);
}

void TestService::Stub::async::set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mmio_input, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_MMIOvalue_, context, request, response, std::move(f));
}

void TestService::Stub::async::set_MMIOvalue(::grpc::ClientContext* context, const ::mmio_input* request, ::rsp_msg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_set_MMIOvalue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::PrepareAsyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rsp_msg, ::mmio_input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_set_MMIOvalue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rsp_msg>* TestService::Stub::Asyncset_MMIOvalueRaw(::grpc::ClientContext* context, const ::mmio_input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncset_MMIOvalueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TestService::Stub::get_code_coverage(::grpc::ClientContext* context, const ::req_msg& request, ::basic_block* response) {
  return ::grpc::internal::BlockingUnaryCall< ::req_msg, ::basic_block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_code_coverage_, context, request, response);
}

void TestService::Stub::async::get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::req_msg, ::basic_block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_code_coverage_, context, request, response, std::move(f));
}

void TestService::Stub::async::get_code_coverage(::grpc::ClientContext* context, const ::req_msg* request, ::basic_block* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_code_coverage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::basic_block>* TestService::Stub::PrepareAsyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::basic_block, ::req_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_code_coverage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::basic_block>* TestService::Stub::Asyncget_code_coverageRaw(::grpc::ClientContext* context, const ::req_msg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_code_coverageRaw(context, request, cq);
  result->StartCall();
  return result;
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::req_msg* req,
             ::rsp_msg* resp) {
               return service->HandleCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::req_msg* req,
             ::rsp_msg* resp) {
               return service->set_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::req_msg, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::req_msg* req,
             ::rsp_msg* resp) {
               return service->remove_breakpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::mmio_addr_range, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mmio_addr_range* req,
             ::rsp_msg* resp) {
               return service->MMIO_set_addr_range(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::req_msg, ::mmio_output, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::req_msg* req,
             ::mmio_output* resp) {
               return service->get_MMIOvalue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::mmio_input, ::rsp_msg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mmio_input* req,
             ::rsp_msg* resp) {
               return service->set_MMIOvalue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::req_msg, ::basic_block, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::req_msg* req,
             ::basic_block* resp) {
               return service->get_code_coverage(ctx, req, resp);
             }, this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::HandleCommand(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::set_breakpoint(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::remove_breakpoint(::grpc::ServerContext* context, const ::req_msg* request, ::rsp_msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::MMIO_set_addr_range(::grpc::ServerContext* context, const ::mmio_addr_range* request, ::rsp_msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::get_MMIOvalue(::grpc::ServerContext* context, const ::req_msg* request, ::mmio_output* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::set_MMIOvalue(::grpc::ServerContext* context, const ::mmio_input* request, ::rsp_msg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::get_code_coverage(::grpc::ServerContext* context, const ::req_msg* request, ::basic_block* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


